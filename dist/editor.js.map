{"version":3,"file":"editor.js","sources":["webpack://rrze-newsletter/./src/components/init-modal/index.js","webpack://rrze-newsletter/./src/components/init-modal/screens/layout-picker/SingleLayoutPreview.js","webpack://rrze-newsletter/./src/components/init-modal/screens/layout-picker/index.js","webpack://rrze-newsletter/./src/components/newsletter-preview/index.js","webpack://rrze-newsletter/./src/components/select-control-with-optgroup/index.js","webpack://rrze-newsletter/./src/components/send-button/index.js","webpack://rrze-newsletter/./src/components/with-api-handler/index.js","webpack://rrze-newsletter/./src/editor/blocks-validation/blocks-filters.js","webpack://rrze-newsletter/./src/editor/blocks-validation/nesting-detection.js","webpack://rrze-newsletter/./src/newsletter-editor/editor/index.js","webpack://rrze-newsletter/./src/newsletter-editor/index.js","webpack://rrze-newsletter/./src/newsletter-editor/layout/index.js","webpack://rrze-newsletter/./src/newsletter-editor/public/index.js","webpack://rrze-newsletter/./src/newsletter-editor/sidebar/index.js","webpack://rrze-newsletter/./src/newsletter-editor/styling/index.js","webpack://rrze-newsletter/./src/newsletter-editor/testing/index.js","webpack://rrze-newsletter/./src/newsletter-editor/utils.js","webpack://rrze-newsletter/./src/service-providers/generic/index.js","webpack://rrze-newsletter/./src/service-providers/index.js","webpack://rrze-newsletter/./src/utils/consts.js","webpack://rrze-newsletter/./src/utils/hooks.js","webpack://rrze-newsletter/./src/utils/index.js","webpack://rrze-newsletter/./node_modules/classnames/index.js","webpack://rrze-newsletter/./src/components/init-modal/style.scss?6852","webpack://rrze-newsletter/./src/components/newsletter-preview/style.scss?6caf","webpack://rrze-newsletter/./src/components/send-button/style.scss?1ad9","webpack://rrze-newsletter/./src/editor/style.scss?84ea","webpack://rrze-newsletter/./src/newsletter-editor/editor/style.scss?40fb","webpack://rrze-newsletter/./src/newsletter-editor/layout/style.scss?fea8","webpack://rrze-newsletter/./src/newsletter-editor/public/style.scss?1bdf","webpack://rrze-newsletter/./src/newsletter-editor/sidebar/style.scss?ee31","webpack://rrze-newsletter/./src/newsletter-editor/testing/style.scss?2d4e","webpack://rrze-newsletter/external \"lodash\"","webpack://rrze-newsletter/external [\"wp\",\"apiFetch\"]","webpack://rrze-newsletter/external [\"wp\",\"blockEditor\"]","webpack://rrze-newsletter/external [\"wp\",\"blocks\"]","webpack://rrze-newsletter/external [\"wp\",\"components\"]","webpack://rrze-newsletter/external [\"wp\",\"compose\"]","webpack://rrze-newsletter/external [\"wp\",\"data\"]","webpack://rrze-newsletter/external [\"wp\",\"domReady\"]","webpack://rrze-newsletter/external [\"wp\",\"editPost\"]","webpack://rrze-newsletter/external [\"wp\",\"element\"]","webpack://rrze-newsletter/external [\"wp\",\"hooks\"]","webpack://rrze-newsletter/external [\"wp\",\"i18n\"]","webpack://rrze-newsletter/external [\"wp\",\"keycodes\"]","webpack://rrze-newsletter/external [\"wp\",\"plugins\"]","webpack://rrze-newsletter/webpack/bootstrap","webpack://rrze-newsletter/webpack/runtime/compat get default export","webpack://rrze-newsletter/webpack/runtime/define property getters","webpack://rrze-newsletter/webpack/runtime/hasOwnProperty shorthand","webpack://rrze-newsletter/webpack/runtime/make namespace object","webpack://rrze-newsletter/./src/editor/index.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Modal } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\n\n/**\n * Plugin dependencies\n */\nimport LayoutPicker from \"./screens/layout-picker\";\nimport \"./style.scss\";\n\nexport default () => {\n    return (\n        <Modal\n            className=\"rrze-newsletter-modal__frame\"\n            isDismissible={false}\n            overlayClassName=\"rrze-newsletter-modal__screen-overlay\"\n            shouldCloseOnClickOutside={false}\n            shouldCloseOnEsc={false}\n            title={__(\"Select a layout for the newsletter\", \"rrze-newsletter\")}\n        >\n            {<LayoutPicker />}\n        </Modal>\n    );\n};\n","/**\n * External dependencies\n */\nimport classnames from \"classnames\";\n\n/**\n * WordPress dependencies\n */\nimport { withDispatch } from \"@wordpress/data\";\nimport { parse } from \"@wordpress/blocks\";\nimport { useState, useMemo } from \"@wordpress/element\";\nimport { Button, TextControl } from \"@wordpress/components\";\nimport { ENTER, SPACE } from \"@wordpress/keycodes\";\nimport { __ } from \"@wordpress/i18n\";\n\n/**\n * Plugin dependencies\n */\nimport { LAYOUT_CPT_SLUG } from \"../../../../utils/consts\";\nimport NewsletterPreview from \"../../../newsletter-preview\";\n\nconst SingleLayoutPreview = ({\n  isEditable,\n  deleteHandler,\n  saveLayout,\n  selectedLayoutId,\n  setSelectedLayoutId,\n  ID,\n  post_title: title,\n  post_content: content,\n  meta,\n}) => {\n  const handleDelete = () => {\n    // eslint-disable-next-line no-alert\n    if (\n      confirm(\n        __(\"Are you sure you want to delete this layout?\", \"rrze-newsletter\")\n      )\n    ) {\n      deleteHandler(ID);\n    }\n  };\n\n  const [layoutName, setLayoutName] = useState(title);\n  const [isSaving, setIsSaving] = useState(false);\n\n  const handleLayoutNameChange = () => {\n    if (layoutName !== title) {\n      setIsSaving(true);\n      saveLayout({ title: layoutName }).then(() => {\n        setIsSaving(false);\n      });\n    }\n  };\n\n  const setPreviewBlocks = (blocks) =>\n    blocks.map((block) => {\n      //@todo\n      return block;\n    });\n\n  const blockPreviewBlocks = useMemo(() => setPreviewBlocks(parse(content)), [\n    content,\n  ]);\n\n  return (\n    <div\n      key={ID}\n      className={classnames(\"rrze-newsletter-layouts__item\", {\n        \"is-active\": selectedLayoutId === ID,\n      })}\n    >\n      <div\n        className=\"rrze-newsletter-layouts__item-preview\"\n        onClick={() => setSelectedLayoutId(ID)}\n        onKeyDown={(event) => {\n          if (ENTER === event.keyCode || SPACE === event.keyCode) {\n            event.preventDefault();\n            setSelectedLayoutId(ID);\n          }\n        }}\n        role=\"button\"\n        tabIndex=\"0\"\n        aria-label={title}\n      >\n        {\"\" === content ? null : (\n          <NewsletterPreview\n            meta={meta}\n            blocks={blockPreviewBlocks}\n            viewportWidth={600}\n          />\n        )}\n      </div>\n      {isEditable ? (\n        <TextControl\n          className=\"rrze-newsletter-layouts__item-label\"\n          value={layoutName}\n          onChange={setLayoutName}\n          onBlur={handleLayoutNameChange}\n          disabled={isSaving}\n          onKeyDown={(event) => {\n            if (ENTER === event.keyCode) {\n              handleLayoutNameChange();\n            }\n          }}\n        />\n      ) : (\n        <div className=\"rrze-newsletter-layouts__item-label\">{title}</div>\n      )}\n      {isEditable && (\n        <Button isDestructive isLink onClick={handleDelete} disabled={isSaving}>\n          {__(\"Delete\", \"rrze-newsletter\")}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default withDispatch((dispatch, { ID }) => {\n  const { saveEntityRecord } = dispatch(\"core\");\n  return {\n    saveLayout: (payload) =>\n      saveEntityRecord(\"postType\", LAYOUT_CPT_SLUG, {\n        status: \"publish\",\n        id: ID,\n        ...payload,\n      }),\n  };\n})(SingleLayoutPreview);\n","/**\n * External dependencies\n */\nimport classnames from \"classnames\";\nimport { find } from \"lodash\";\n\n/**\n * WordPress dependencies\n */\nimport { parse } from \"@wordpress/blocks\";\nimport { Fragment, useMemo, useState, useEffect } from \"@wordpress/element\";\nimport { compose } from \"@wordpress/compose\";\nimport { withSelect, withDispatch } from \"@wordpress/data\";\nimport { Button, Spinner } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\n\n/**\n * Plugin dependencies\n */\nimport { BLANK_LAYOUT_ID } from \"../../../../utils/consts\";\nimport { isUserDefinedLayout } from \"../../../../utils\";\nimport { useLayoutsState } from \"../../../../utils/hooks\";\nimport SingleLayoutPreview from \"./SingleLayoutPreview\";\nimport NewsletterPreview from \"../../../newsletter-preview\";\n\nconst LAYOUTS_TABS = [\n  {\n    title: __(\"Prebuilt\", \"rrze-newsletter\"),\n    filter: (layout) => layout.post_author === undefined,\n  },\n  {\n    title: __(\"Saved\", \"rrze-newsletter\"),\n    filter: isUserDefinedLayout,\n    isEditable: true,\n  },\n];\n\nconst LayoutPicker = ({\n  getBlocks,\n  insertBlocks,\n  replaceBlocks,\n  savePost,\n  setNewsletterMeta,\n}) => {\n  const { layouts, isFetchingLayouts, deleteLayoutPost } = useLayoutsState();\n\n  const insertLayout = (layoutId) => {\n    const { post_content: content, meta = {} } =\n      find(layouts, { ID: layoutId }) || {};\n    const blocksToInsert = content ? parse(content) : [];\n    const existingBlocksIds = getBlocks().map(({ clientId }) => clientId);\n    if (existingBlocksIds.length) {\n      replaceBlocks(existingBlocksIds, blocksToInsert);\n    } else {\n      insertBlocks(blocksToInsert);\n    }\n    const metaPayload = {\n      rrze_newsletter_template_id: layoutId,\n      ...meta,\n    };\n    setNewsletterMeta(metaPayload);\n    setTimeout(savePost, 1);\n  };\n\n  const [selectedLayoutId, setSelectedLayoutId] = useState(null);\n  const layoutPreviewProps = useMemo(() => {\n    const layout = selectedLayoutId && find(layouts, { ID: selectedLayoutId });\n    return layout\n      ? { blocks: parse(layout.post_content), meta: layout.meta }\n      : null;\n  }, [selectedLayoutId, layouts.length]);\n\n  const canRenderPreview =\n    layoutPreviewProps && layoutPreviewProps.blocks.length > 0;\n\n  const renderPreview = () =>\n    canRenderPreview ? (\n      <NewsletterPreview {...layoutPreviewProps} viewportWidth={600} />\n    ) : (\n      <p>{__(\"Select a layout to preview.\", \"rrze-newsletter\")}</p>\n    );\n\n  const [activeTabIndex, setActiveTabIndex] = useState(0);\n  const activeTab = LAYOUTS_TABS[activeTabIndex];\n  const displayedLayouts = layouts.filter(activeTab.filter);\n\n  // Switch tab to user layouts if there are any.\n  useEffect(() => {\n    if (layouts.filter(isUserDefinedLayout).length) {\n      setActiveTabIndex(1);\n    }\n  }, [layouts.length]);\n\n  return (\n    <Fragment>\n      <div className=\"rrze-newsletter-modal__content\">\n        <div className=\"rrze-newsletter-tabs rrze-newsletter-buttons-group\">\n          {LAYOUTS_TABS.map(({ title }, i) => (\n            <Button\n              key={i}\n              disabled={isFetchingLayouts}\n              className={classnames(\"rrze-newsletter-tabs__button\", {\n                \"rrze-newsletter-tabs__button--is-active\":\n                  !isFetchingLayouts && i === activeTabIndex,\n              })}\n              onClick={() => setActiveTabIndex(i)}\n            >\n              {title}\n            </Button>\n          ))}\n        </div>\n        <div\n          className={classnames(\"rrze-newsletter-modal__layouts\", {\n            \"rrze-newsletter-modal__layouts--loading\": isFetchingLayouts,\n          })}\n        >\n          {isFetchingLayouts ? (\n            <Spinner />\n          ) : (\n            <div\n              className={classnames({\n                \"rrze-newsletter-layouts\": displayedLayouts.length > 0,\n              })}\n            >\n              {displayedLayouts.length ? (\n                displayedLayouts.map((layout) => (\n                  <SingleLayoutPreview\n                    key={layout.ID}\n                    selectedLayoutId={selectedLayoutId}\n                    setSelectedLayoutId={setSelectedLayoutId}\n                    deleteHandler={deleteLayoutPost}\n                    isEditable={activeTab.isEditable}\n                    {...layout}\n                  />\n                ))\n              ) : (\n                <span>\n                  {__(\n                    'Turn any newsletter to a layout via the \"Layout\" sidebar menu in the editor.',\n                    \"rrze-newsletter\"\n                  )}\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n\n        <div className=\"rrze-newsletter-modal__preview\">\n          {!isFetchingLayouts && renderPreview()}\n        </div>\n      </div>\n      <div className=\"rrze-newsletter-modal__action-buttons\">\n        <Button isSecondary onClick={() => insertLayout(BLANK_LAYOUT_ID)}>\n          {__(\"Start With A Blank Layout\", \"rrze-newsletter\")}\n        </Button>\n        <span className=\"separator\"> </span>\n        <Button\n          isPrimary\n          disabled={isFetchingLayouts || !canRenderPreview}\n          onClick={() => insertLayout(selectedLayoutId)}\n        >\n          {__(\"Use Selected Layout\", \"rrze-newsletter\")}\n        </Button>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default compose([\n  withSelect((select) => {\n    const { getBlocks } = select(\"core/block-editor\");\n    return {\n      getBlocks,\n    };\n  }),\n  withDispatch((dispatch) => {\n    const { savePost, editPost } = dispatch(\"core/editor\");\n    const { insertBlocks, replaceBlocks } = dispatch(\"core/block-editor\");\n    return {\n      savePost,\n      insertBlocks,\n      replaceBlocks,\n      setNewsletterMeta: (meta) => editPost({ meta }),\n    };\n  }),\n])(LayoutPicker);\n","/**\n * WordPress dependencies\n */\nimport { BlockPreview } from \"@wordpress/block-editor\";\nimport { Fragment, useMemo } from \"@wordpress/element\";\n\n/**\n * Plugin dependencies\n */\nimport \"./style.scss\";\n\nconst NewsletterPreview = ({ meta = {}, ...props }) => {\n    const ELEMENT_ID = useMemo(\n        () => `preview-${Math.round(Math.random() * 1000)}`,\n        []\n    );\n\n    return (\n        <Fragment>\n            <style>{`${\n                meta.rrze_newsletter_font_body\n                    ? `\n#${ELEMENT_ID} *:not( code ) {\n  font-family: ${meta.rrze_newsletter_font_body};\n}`\n                    : \" \"\n            }${\n                meta.rrze_newsletter_font_header\n                    ? `\n#${ELEMENT_ID} h1, #${ELEMENT_ID} h2, #${ELEMENT_ID} h3, #${ELEMENT_ID} h4, #${ELEMENT_ID} h5, #${ELEMENT_ID} h6 {\n  font-family: ${meta.rrze_newsletter_font_header};\n}`\n                    : \" \"\n            }`}</style>\n            <div\n                id={ELEMENT_ID}\n                className=\"rrze-newsletter__layout-preview\"\n                style={{\n                    backgroundColor: meta.rrze_newsletter_background_color,\n                }}\n            >\n                <BlockPreview {...props} />\n            </div>\n        </Fragment>\n    );\n};\n\nexport default NewsletterPreview;\n","/**\n * External dependencies\n */\nimport { isEmpty } from \"lodash\";\n\n/**\n * WordPress dependencies\n */\nimport { useInstanceId } from \"@wordpress/compose\";\nimport { BaseControl } from \"@wordpress/components\";\n\n/**\n * SelectControl with optgroup support\n */\nexport default function SelectControlWithOptGroup({\n    help,\n    label,\n    multiple = false,\n    onChange,\n    optgroups = [],\n    className,\n    hideLabelFromVision,\n    ...props\n}) {\n    const instanceId = useInstanceId(SelectControlWithOptGroup);\n    const id = `inspector-select-control-${instanceId}`;\n    const onChangeValue = (event) => {\n        if (multiple) {\n            const selectedOptions = [...event.target.options].filter(\n                ({ selected }) => selected\n            );\n            const newValues = selectedOptions.map(({ value }) => value);\n            onChange(newValues);\n            return;\n        }\n        onChange(event.target.value);\n    };\n\n    // Disable reason: A select with an onchange throws a warning\n\n    if (isEmpty(optgroups)) {\n        return null;\n    }\n\n    return (\n        <BaseControl\n            label={label}\n            hideLabelFromVision={hideLabelFromVision}\n            id={id}\n            help={help}\n            className={className}\n        >\n            <select\n                id={id}\n                className=\"components-select-control__input\"\n                onChange={onChangeValue}\n                aria-describedby={!help ? `${id}__help` : undefined}\n                multiple={multiple}\n                {...props}\n            >\n                {optgroups.map(\n                    ({ label: optgroupLabel, options }, optgroupIndex) => (\n                        <optgroup label={optgroupLabel} key={optgroupIndex}>\n                            {options.map((option, optionIndex) => (\n                                <option\n                                    key={`${option.label}-${option.value}-${optionIndex}`}\n                                    value={option.value}\n                                    disabled={option.disabled}\n                                >\n                                    {option.label}\n                                </option>\n                            ))}\n                        </optgroup>\n                    )\n                )}\n            </select>\n        </BaseControl>\n    );\n}\n","/**\n * WordPress dependencies\n */\nimport { withDispatch, withSelect } from \"@wordpress/data\";\nimport { compose } from \"@wordpress/compose\";\nimport { Button, Modal, Notice } from \"@wordpress/components\";\nimport { Fragment, useState } from \"@wordpress/element\";\nimport { __ } from \"@wordpress/i18n\";\n\n/**\n * External dependencies\n */\nimport { get } from \"lodash\";\n\nimport \"./style.scss\";\n\nexport default compose([\n    withDispatch((dispatch) => {\n        const { editPost, savePost } = dispatch(\"core/editor\");\n        return { editPost, savePost };\n    }),\n    withSelect((select, { forceIsDirty }) => {\n        const {\n            getCurrentPost,\n            getEditedPostAttribute,\n            getEditedPostVisibility,\n            isEditedPostPublishable,\n            isEditedPostSaveable,\n            isSavingPost,\n            isEditedPostBeingScheduled,\n            isCurrentPostPublished,\n        } = select(\"core/editor\");\n        return {\n            isPublishable: forceIsDirty || isEditedPostPublishable(),\n            isSaveable: isEditedPostSaveable(),\n            status: getEditedPostAttribute(\"status\"),\n            isSaving: isSavingPost(),\n            isEditedPostBeingScheduled: isEditedPostBeingScheduled(),\n            hasPublishAction: get(\n                getCurrentPost(),\n                [\"_links\", \"wp:action-publish\"],\n                false\n            ),\n            visibility: getEditedPostVisibility(),\n            meta: getEditedPostAttribute(\"meta\"),\n            isPublished: isCurrentPostPublished(),\n        };\n    }),\n])(\n    ({\n        editPost,\n        savePost,\n        isPublishable,\n        isSaveable,\n        isSaving,\n        status,\n        isEditedPostBeingScheduled,\n        hasPublishAction,\n        visibility,\n        meta,\n        isPublished,\n    }) => {\n        const { newsletterValidationErrors = [], rrze_newsletter_is_public } = meta;\n\n        const isButtonEnabled =\n            (isPublishable || isEditedPostBeingScheduled) &&\n            isSaveable &&\n            !isPublished &&\n            !isSaving &&\n            0 === newsletterValidationErrors.length;\n        let label;\n        if (isPublished) {\n            if (isSaving) label = __(\"Sending\", \"rrze-newsletter\");\n            else {\n                label = rrze_newsletter_is_public\n                    ? __(\"Sent and Published\", \"rrze-newsletter\")\n                    : __(\"Sent\", \"rrze-newsletter\");\n            }\n        } else if (\"future\" === status) {\n            // Scheduled to be sent\n            label = __(\"Scheduled\", \"rrze-newsletter\");\n        } else if (isEditedPostBeingScheduled) {\n            label = __(\"Schedule sending\", \"rrze-newsletter\");\n        } else {\n            label = rrze_newsletter_is_public\n                ? __(\"Send and Publish\", \"rrze-newsletter\")\n                : __(\"Send\", \"rrze-newsletter\");\n        }\n\n        let publishStatus;\n        if (!hasPublishAction) {\n            publishStatus = \"pending\";\n        } else if (visibility === \"private\") {\n            publishStatus = \"private\";\n        } else if (isEditedPostBeingScheduled) {\n            publishStatus = \"future\";\n        } else {\n            publishStatus = \"publish\";\n        }\n\n        const triggerNewsletterSend = () => {\n            editPost({ status: publishStatus });\n            savePost();\n        };\n\n        const [modalVisible, setModalVisible] = useState(false);\n\n        // For sent newsletters, display the generic button text.\n        if (isPublished) {\n            return (\n                <Button\n                    className=\"editor-post-publish-button\"\n                    isBusy={isSaving}\n                    isPrimary\n                    disabled={isSaving}\n                    onClick={savePost}\n                >\n                    {isSaving\n                        ? __(\"Updating...\", \"rrze-newsletter\")\n                        : __(\"Update\", \"rrze-newsletter\")}\n                </Button>\n            );\n        }\n\n        return (\n            <Fragment>\n                <Button\n                    className=\"editor-post-publish-button\"\n                    isBusy={isSaving && \"publish\" === status}\n                    isPrimary\n                    onClick={async () => {\n                        await savePost();\n                        setModalVisible(true);\n                    }}\n                    disabled={!isButtonEnabled}\n                >\n                    {label}\n                </Button>\n                {modalVisible && (\n                    <Modal\n                        className=\"rrze-newsletter__modal\"\n                        title={__(\"Send your newsletter?\", \"rrze-newsletter\")}\n                        onRequestClose={() => setModalVisible(false)}\n                    >\n                        {newsletterValidationErrors.length ? (\n                            <Notice status=\"error\" isDismissible={false}>\n                                {__(\n                                    \"The following errors prevent the newsletter from being sent:\",\n                                    \"rrze-newsletter\"\n                                )}\n                                <ul>\n                                    {newsletterValidationErrors.map(\n                                        (error, i) => (\n                                            <li key={i}>{error}</li>\n                                        )\n                                    )}\n                                </ul>\n                            </Notice>\n                        ) : null}\n                        <Button\n                            isPrimary\n                            disabled={newsletterValidationErrors.length > 0}\n                            onClick={() => {\n                                triggerNewsletterSend();\n                                setModalVisible(false);\n                            }}\n                        >\n                            {__(\"Send\", \"rrze-newsletter\")}\n                        </Button>\n                        <Button\n                            isSecondary\n                            onClick={() => setModalVisible(false)}\n                        >\n                            {__(\"Cancel\", \"rrze-newsletter\")}\n                        </Button>\n                    </Modal>\n                )}\n            </Fragment>\n        );\n    }\n);\n","/**\n * WordPress dependencies\n */\nimport { __ } from \"@wordpress/i18n\";\nimport apiFetch from \"@wordpress/api-fetch\";\nimport { dispatch, select } from \"@wordpress/data\";\nimport { createHigherOrderComponent } from \"@wordpress/compose\";\nimport { useState } from \"@wordpress/element\";\n\nexport default () =>\n    createHigherOrderComponent(\n        (OriginalComponent) => (props) => {\n            const [inFlight, setInFlight] = useState(false);\n            const [errors, setErrors] = useState({});\n            const {\n                createSuccessNotice,\n                createErrorNotice,\n                removeNotice,\n            } = dispatch(\"core/notices\");\n            const { getNotices } = select(\"core/notices\");\n            const setInFlightForAsync = () => {\n                setInFlight(true);\n            };\n            const successNote = __(\"Newsletter sent on \", \"rrze-newsletter\");\n            const apiFetchWithErrorHandling = (apiRequest) => {\n                setInFlight(true);\n                return new Promise((resolve, reject) => {\n                    apiFetch(apiRequest)\n                        .then((response) => {\n                            const { message } = response;\n                            getNotices().forEach((notice) => {\n                                if (\n                                    \"error\" !== notice.status &&\n                                    (\"success\" !== notice.status ||\n                                        -1 ===\n                                            notice.content.indexOf(successNote))\n                                ) {\n                                    removeNotice(notice.id);\n                                }\n                            });\n                            if (message) {\n                                createSuccessNotice(message);\n                            }\n                            setInFlight(false);\n                            setErrors({});\n                            resolve(response);\n                        })\n                        .catch((error) => {\n                            const { message } = error;\n                            getNotices().forEach((notice) => {\n                                if (\n                                    \"error\" !== notice.status &&\n                                    (\"success\" !== notice.status ||\n                                        -1 ===\n                                            notice.content.indexOf(successNote))\n                                ) {\n                                    removeNotice(notice.id);\n                                }\n                            });\n                            createErrorNotice(message);\n                            setInFlight(false);\n                            setErrors({ [error.code]: true });\n                            reject(error);\n                        });\n                });\n            };\n            return (\n                <OriginalComponent\n                    {...props}\n                    apiFetchWithErrorHandling={apiFetchWithErrorHandling}\n                    errors={errors}\n                    setInFlightForAsync={setInFlightForAsync}\n                    inFlight={inFlight}\n                    successNote={successNote}\n                />\n            );\n        },\n        \"with-api-handler\"\n    );\n","/**\n * External dependencies\n */\nimport { every, some } from \"lodash\";\n\n/**\n * WordPress dependencies\n */\nimport { __ } from \"@wordpress/i18n\";\nimport { addFilter } from \"@wordpress/hooks\";\nimport { createHigherOrderComponent } from \"@wordpress/compose\";\nimport { select } from \"@wordpress/data\";\n\nconst handleSideAlignment = (warnings, props) => {\n    if (\n        props.attributes.align === \"left\" ||\n        props.attributes.align === \"right\"\n    ) {\n        warnings.push(__(\"Side alignment\", \"rrze-newsletter\"));\n    }\n    return warnings;\n};\n\nconst isCenterAligned = (block) =>\n    block.attributes.verticalAlignment === \"center\";\n\nconst getWarnings = (props) => {\n    let warnings = [];\n    const { getBlock } = select(\"core/block-editor\");\n    const block = getBlock(props.block.clientId);\n    switch (props.name) {\n        case \"core/group\":\n            if (props.attributes.__nestedGroupWarning) {\n                warnings.push(__(\"Nested group\", \"rrze-newsletter\"));\n            }\n            break;\n\n        // `vertical-align='middle'` will only work if all columns are middle-aligned.\n        // This is different in Gutenberg, because it uses flexbox layout (not available in email HTML).\n        //\n        // If a user chooses middle-alignment of a column, they will be prompted to\n        // middle-align all of the columns.\n        //\n        // Middle alignment option should be removed from the UI for a single column, when that's\n        // handled by the block editor filters.\n        case \"core/columns\":\n            if (block) {\n                const { innerBlocks } = block;\n                const isAnyColumnCenterAligned = some(\n                    innerBlocks,\n                    isCenterAligned\n                );\n                const areAllColumnsCenterAligned = every(\n                    innerBlocks,\n                    isCenterAligned\n                );\n                if (isAnyColumnCenterAligned && !areAllColumnsCenterAligned) {\n                    warnings.push(\n                        __(\n                            \"Unequal middle alignment. All or none of the columns should be middle-aligned.\",\n                            \"rrze-newsletter\"\n                        )\n                    );\n                }\n            }\n            break;\n\n        case \"core/column\":\n            if (props.attributes.__nestedColumnWarning) {\n                warnings.push(__(\"Nested columns\", \"rrze-newsletter\"));\n            }\n            break;\n\n        case \"core/image\":\n            warnings = handleSideAlignment(warnings, props);\n            if (props.attributes.align === \"full\") {\n                warnings.push(__(\"Full width\", \"rrze-newsletter\"));\n            }\n            break;\n\n        case \"core/paragraph\":\n            if (props.attributes.content.indexOf(\"<img\") >= 0) {\n                warnings.push(__(\"Inline image\", \"rrze-newsletter\"));\n            }\n            if (props.attributes.dropCap) {\n                warnings.push(__(\"Drop cap\", \"rrze-newsletter\"));\n            }\n            break;\n    }\n    return warnings;\n};\n\nconst withUnsupportedFeaturesNotices = createHigherOrderComponent(\n    (BlockListBlock) => {\n        return (props) => {\n            const warnings = getWarnings(props);\n            return warnings.length ? (\n                <div className=\"rrze-newsletter__editor-block\">\n                    <div className=\"rrze-newsletter__editor-block__warning components-notice is-error\">\n                        {__(\n                            \"These features will not be displayed correctly in an email, please remove them:\",\n                            \"rrze-newsletter\"\n                        )}\n                        {warnings.map((warning, i) => (\n                            <strong key={i}>\n                                <br />\n                                {warning}\n                            </strong>\n                        ))}\n                    </div>\n                    <BlockListBlock {...props} />\n                </div>\n            ) : (\n                <BlockListBlock {...props} />\n            );\n        };\n    },\n    \"withInspectorControl\"\n);\n\nexport const addBlocksValidationFilter = () => {\n    addFilter(\n        \"editor.BlockListBlock\",\n        \"rrze-newsletter/unsupported-features-notices\",\n        withUnsupportedFeaturesNotices\n    );\n};\n","/**\n * External dependencies\n */\nimport { some } from \"lodash\";\n\n/**\n * WordPress dependencies\n */\nimport { withSelect, withDispatch } from \"@wordpress/data\";\nimport { compose } from \"@wordpress/compose\";\nimport { useEffect } from \"@wordpress/element\";\n\nconst NestedColumnsDetectionBase = ({ blocks, updateBlock }) => {\n    const handleWarning = (block, condition, warningKeyName) => {\n        const hasWarning = block.attributes[warningKeyName] === true;\n\n        if (condition && !hasWarning) {\n            updateBlock(block.clientId, {\n                ...block,\n                attributes: { ...block.attributes, [warningKeyName]: true },\n            });\n        } else if (!condition && hasWarning) {\n            updateBlock(block.clientId, {\n                ...block,\n                attributes: { ...block.attributes, [warningKeyName]: false },\n            });\n        }\n    };\n\n    const warnIfColumnHasColumns = (block) => {\n        if (block.name === \"core/column\") {\n            const hasColumns = some(\n                block.innerBlocks,\n                ({ name }) => name === \"core/columns\"\n            );\n            handleWarning(block, hasColumns, \"__nestedColumnWarning\");\n        }\n        block.innerBlocks.forEach(warnIfColumnHasColumns);\n    };\n\n    const warnIfIsGroupBlock = (block) => {\n        handleWarning(\n            block,\n            block.name === \"core/group\",\n            \"__nestedGroupWarning\"\n        );\n        block.innerBlocks.forEach(warnIfIsGroupBlock);\n    };\n\n    useEffect(() => {\n        blocks.forEach((block) => {\n            // A column cannot host columns.\n            block.innerBlocks.forEach(warnIfColumnHasColumns);\n            // Group can only be top-level.\n            block.innerBlocks.forEach(warnIfIsGroupBlock);\n        });\n    }, [blocks]);\n\n    return null;\n};\n\nexport const NestedColumnsDetection = compose([\n    withSelect((select) => {\n        const { getBlocks } = select(\"core/block-editor\");\n        return {\n            blocks: getBlocks(),\n        };\n    }),\n    withDispatch((dispatch) => {\n        return {\n            updateBlock: (id, block) => {\n                dispatch(\"core/block-editor\").replaceBlock(id, block);\n            },\n        };\n    }),\n])(NestedColumnsDetectionBase);\n","/**\n * External dependencies\n */\nimport { isEmpty } from \"lodash\";\n\n/**\n * WordPress dependencies\n */\nimport { compose } from \"@wordpress/compose\";\nimport { withDispatch, withSelect } from \"@wordpress/data\";\nimport { createPortal, useEffect, useState } from \"@wordpress/element\";\nimport { registerPlugin } from \"@wordpress/plugins\";\n\n/**\n * Plugin dependencies\n */\nimport withApiHandler from \"../../components/with-api-handler\";\nimport SendButton from \"../../components/send-button\";\nimport \"./style.scss\";\n\nconst Editor = compose([\n    withApiHandler(),\n    withSelect((select) => {\n        const {\n            getCurrentPostId,\n            getCurrentPostAttribute,\n            getEditedPostAttribute,\n            isPublishingPost,\n            isSavingPost,\n            isCleanNewPost,\n        } = select(\"core/editor\");\n        const { getActiveGeneralSidebarName } = select(\"core/edit-post\");\n        const meta = getEditedPostAttribute(\"meta\");\n        const status = getCurrentPostAttribute(\"status\");\n        const sentDate = getCurrentPostAttribute(\"date\");\n\n        return {\n            isCleanNewPost: isCleanNewPost(),\n            postId: getCurrentPostId(),\n            isReady: meta.newsletterValidationErrors\n                ? meta.newsletterValidationErrors.length === 0\n                : false,\n            activeSidebarName: getActiveGeneralSidebarName(),\n            isPublishingOrSavingPost: isSavingPost() || isPublishingPost(),\n            status,\n            sentDate,\n            isPublic: meta.rrze_newsletter_is_public,\n        };\n    }),\n    withDispatch((dispatch) => {\n        const {\n            lockPostAutosaving,\n            lockPostSaving,\n            unlockPostSaving,\n            editPost,\n        } = dispatch(\"core/editor\");\n        const { createNotice } = dispatch(\"core/notices\");\n        return {\n            lockPostAutosaving,\n            lockPostSaving,\n            unlockPostSaving,\n            editPost,\n            createNotice,\n        };\n    }),\n])((props) => {\n    const [publishEl] = useState(document.createElement(\"div\"));\n    // Create alternate publish button\n    useEffect(() => {\n        const publishButton = document.getElementsByClassName(\n            \"editor-post-publish-button__button\"\n        )[0];\n        publishButton.parentNode.insertBefore(publishEl, publishButton);\n    }, []);\n\n    // Set color palette option.\n    useEffect(() => {\n        if (isEmpty(props.colorPalette)) {\n            return;\n        }\n        props.apiFetchWithErrorHandling({\n            path: `/rrze-newsletter/v1/color-palette`,\n            data: props.colorPalette,\n            method: \"POST\",\n        });\n    }, [JSON.stringify(props.colorPalette)]);\n\n    // Lock or unlock post publishing.\n    useEffect(() => {\n        if (props.isReady) {\n            props.unlockPostSaving(\"rrze-newsletter-post-lock\");\n        } else {\n            props.lockPostSaving(\"rrze-newsletter-post-lock\");\n        }\n    }, [props.isReady]);\n\n    useEffect(() => {\n        if (\"publish\" === props.status && !props.isPublishingOrSavingPost) {\n            const dateTime = props.sentDate\n                ? new Date(props.sentDate).toLocaleString()\n                : \"\";\n\n            // Lock autosaving after a newsletter is sent.\n            props.lockPostAutosaving();\n\n            // Show an editor notice if the newsletter has been sent.\n            props.createNotice(\"success\", props.successNote + dateTime, {\n                isDismissible: false,\n            });\n        }\n    }, [props.status]);\n\n    useEffect(() => {\n        // Hide post title if the newsletter is a not a public post.\n        const editorTitleEl = document.querySelector(\".editor-post-title\");\n        if (editorTitleEl) {\n            editorTitleEl.classList[props.isPublic ? \"remove\" : \"add\"](\n                \"rrze-newsletter-post-title-hidden\"\n            );\n        }\n    }, [props.isPublic]);\n\n    return createPortal(<SendButton />, publishEl);\n});\n\nexport default () => {\n    registerPlugin(\"rrze-newsletter-edit\", {\n        render: Editor,\n    });\n};\n","/**\n * WordPress dependencies\n */\nimport { __ } from \"@wordpress/i18n\";\nimport { withSelect } from \"@wordpress/data\";\nimport { compose } from \"@wordpress/compose\";\nimport { Fragment, useState } from \"@wordpress/element\";\nimport { PluginDocumentSettingPanel } from \"@wordpress/edit-post\";\nimport { registerPlugin } from \"@wordpress/plugins\";\n\n/**\n * Plugin dependencies\n */\nimport InitModal from \"../components/init-modal\";\nimport Layout from \"./layout/\";\nimport Sidebar from \"./sidebar/\";\nimport Testing from \"./testing/\";\nimport { Styling, ApplyStyling } from \"./styling/\";\nimport { PublicSettings } from \"./public\";\nimport registerEditorPlugin from \"./editor/\";\n\nregisterEditorPlugin();\n\nconst NewsletterEdit = ({ layoutId }) => {\n    const [shouldDisplaySettings, setShouldDisplaySettings] = useState(\n        window &&\n            window.rrze_newsletter_data &&\n            window.rrze_newsletter_data.is_service_provider_configured !== \"1\"\n    );\n\n    const isDisplayingInitModal = shouldDisplaySettings || -1 === layoutId;\n\n    return isDisplayingInitModal ? (\n        <InitModal\n            shouldDisplaySettings={shouldDisplaySettings}\n            onSetupStatus={setShouldDisplaySettings}\n        />\n    ) : (\n        <Fragment>\n            <PluginDocumentSettingPanel\n                name=\"newsletters-settings-panel\"\n                title={__(\"Newsletter\", \"rrze-newsletter\")}\n            >\n                <Sidebar />\n                <PublicSettings />\n            </PluginDocumentSettingPanel>\n            <PluginDocumentSettingPanel\n                name=\"newsletters-styling-panel\"\n                title={__(\"Styling\", \"rrze-newsletter\")}\n            >\n                <Styling />\n            </PluginDocumentSettingPanel>\n            <PluginDocumentSettingPanel\n                name=\"newsletters-testing-panel\"\n                title={__(\"Testing\", \"rrze-newsletter\")}\n            >\n                <Testing />\n            </PluginDocumentSettingPanel>\n            <PluginDocumentSettingPanel\n                name=\"newsletters-layout-panel\"\n                title={__(\"Layout\", \"rrze-newsletter\")}\n            >\n                <Layout />\n            </PluginDocumentSettingPanel>\n\n            <ApplyStyling />\n        </Fragment>\n    );\n};\n\nconst NewsletterEditWithSelect = compose([\n    withSelect((select) => {\n        const { getEditedPostAttribute } = select(\"core/editor\");\n        const meta = getEditedPostAttribute(\"meta\");\n        return { layoutId: meta.rrze_newsletter_template_id };\n    }),\n])(NewsletterEdit);\n\nregisterPlugin(\"rrze-newsletter-sidebar\", {\n    render: NewsletterEditWithSelect,\n    icon: null,\n});\n","/**\n * External dependencies\n */\nimport { isEqual, find } from \"lodash\";\n\n/**\n * WordPress dependencies\n */\nimport { compose } from \"@wordpress/compose\";\nimport { parse, serialize } from \"@wordpress/blocks\";\nimport { __ } from \"@wordpress/i18n\";\nimport { withDispatch, withSelect } from \"@wordpress/data\";\nimport { Fragment, useState, useEffect, useMemo } from \"@wordpress/element\";\nimport { Button, Modal, TextControl, Spinner } from \"@wordpress/components\";\n\n/**\n * Plugin dependencies\n */\nimport { useLayoutsState } from \"../../utils/hooks\";\nimport { LAYOUT_CPT_SLUG, NEWSLETTER_CPT_SLUG } from \"../../utils/consts\";\nimport { isUserDefinedLayout } from \"../../utils\";\nimport \"./style.scss\";\nimport NewsletterPreview from \"../../components/newsletter-preview\";\n\nexport default compose([\n    withSelect((select) => {\n        const {\n            getEditedPostAttribute,\n            isEditedPostEmpty,\n            getCurrentPostId,\n        } = select(\"core/editor\");\n        const { getBlocks } = select(\"core/block-editor\");\n        const meta = getEditedPostAttribute(\"meta\");\n        const {\n            rrze_newsletter_template_id: layoutId,\n            rrze_newsletter_background_color,\n            rrze_newsletter_font_body,\n            rrze_newsletter_font_header,\n        } = meta;\n        return {\n            layoutId,\n            postTitle: getEditedPostAttribute(\"title\"),\n            postBlocks: getBlocks(),\n            isEditedPostEmpty: isEditedPostEmpty(),\n            currentPostId: getCurrentPostId(),\n            stylingMeta: {\n                rrze_newsletter_background_color,\n                rrze_newsletter_font_body,\n                rrze_newsletter_font_header,\n            },\n        };\n    }),\n    withDispatch((dispatch, { currentPostId, stylingMeta }) => {\n        const { replaceBlocks } = dispatch(\"core/block-editor\");\n        const { editPost } = dispatch(\"core/editor\");\n        const { saveEntityRecord } = dispatch(\"core\");\n        return {\n            replaceBlocks,\n            saveLayoutIdMeta: (id) => {\n                editPost({ meta: { rrze_newsletter_template_id: id } });\n                saveEntityRecord(\"postType\", NEWSLETTER_CPT_SLUG, {\n                    id: currentPostId,\n                    meta: { rrze_newsletter_template_id: id, ...stylingMeta },\n                });\n            },\n            saveLayout: (payload) =>\n                saveEntityRecord(\"postType\", LAYOUT_CPT_SLUG, {\n                    status: \"publish\",\n                    ...payload,\n                }),\n        };\n    }),\n])(\n    ({\n        saveLayoutIdMeta,\n        layoutId,\n        replaceBlocks,\n        saveLayout,\n        postBlocks,\n        postTitle,\n        isEditedPostEmpty,\n        stylingMeta,\n    }) => {\n        const [warningModalVisible, setWarningModalVisible] = useState(false);\n        const { layouts, isFetchingLayouts } = useLayoutsState();\n\n        const [usedLayout, setUsedLayout] = useState({});\n\n        useEffect(() => {\n            setUsedLayout(find(layouts, { ID: layoutId }) || {});\n        }, [layouts.length]);\n\n        const blockPreview = useMemo(() => {\n            return usedLayout.post_content\n                ? parse(usedLayout.post_content)\n                : null;\n        }, [usedLayout]);\n\n        const clearPost = () => {\n            const clientIds = postBlocks.map(({ clientId }) => clientId);\n            if (clientIds && clientIds.length) {\n                replaceBlocks(clientIds, []);\n            }\n        };\n\n        const [isSavingLayout, setIsSavingLayout] = useState(false);\n        const [isManageModalVisible, setIsManageModalVisible] = useState(null);\n        const [newLayoutName, setNewLayoutName] = useState(postTitle);\n\n        const handleLayoutUpdate = (updatedLayout) => {\n            setIsSavingLayout(false);\n            // Set this new layout as the newsletter's layout\n            saveLayoutIdMeta(updatedLayout.id);\n\n            // Update the layout preview\n            // The shape of this data is different than the API response for CPT\n            setUsedLayout({\n                ...updatedLayout,\n                post_content: updatedLayout.content.raw,\n                post_title: updatedLayout.title.raw,\n                post_type: LAYOUT_CPT_SLUG,\n            });\n        };\n\n        const postContent = useMemo(() => serialize(postBlocks), [postBlocks]);\n        const isPostContentSameAsLayout =\n            postContent === usedLayout.post_content &&\n            isEqual(usedLayout.meta, stylingMeta);\n\n        const handleSaveAsLayout = () => {\n            setIsSavingLayout(true);\n            const updatePayload = {\n                title: newLayoutName,\n                content: postContent,\n                meta: stylingMeta,\n            };\n            saveLayout(updatePayload).then((newLayout) => {\n                setIsManageModalVisible(false);\n\n                handleLayoutUpdate(newLayout);\n            });\n        };\n\n        const handeLayoutUpdate = () => {\n            if (\n                confirm(\n                    __(\n                        \"Are you sure you want to overwrite this layout?\",\n                        \"rrze-newsletter\"\n                    )\n                )\n            ) {\n                setIsSavingLayout(true);\n                const updatePayload = {\n                    id: usedLayout.ID,\n                    content: postContent,\n                    meta: stylingMeta,\n                };\n                saveLayout(updatePayload).then(handleLayoutUpdate);\n            }\n        };\n\n        const isUsingCustomLayout = isUserDefinedLayout(usedLayout);\n\n        return (\n            <Fragment>\n                {Boolean(layoutId && isFetchingLayouts) && (\n                    <div className=\"rrze-newsletter-layouts__spinner\">\n                        <Spinner />\n                    </div>\n                )}\n                {blockPreview !== null && (\n                    <div className=\"rrze-newsletter-layouts\">\n                        <div className=\"rrze-newsletter-layouts__item\">\n                            <div className=\"rrze-newsletter-layouts__item-preview\">\n                                <NewsletterPreview\n                                    meta={usedLayout.meta}\n                                    blocks={blockPreview}\n                                    viewportWidth={600}\n                                />\n                            </div>\n                            <div className=\"rrze-newsletter-layouts__item-label\">\n                                {usedLayout.post_title}\n                            </div>\n                        </div>\n                    </div>\n                )}\n                <div className=\"rrze-newsletter-buttons-group rrze-newsletter-buttons-group--spaced\">\n                    <Button\n                        isPrimary\n                        disabled={isEditedPostEmpty || isSavingLayout}\n                        onClick={() => setIsManageModalVisible(true)}\n                    >\n                        {__(\"Save new layout\", \"rrze-newsletter\")}\n                    </Button>\n\n                    {isUsingCustomLayout && (\n                        <Button\n                            isSecondary\n                            disabled={\n                                isPostContentSameAsLayout || isSavingLayout\n                            }\n                            onClick={handeLayoutUpdate}\n                        >\n                            {__(\"Update layout\", \"rrze-newsletter\")}\n                        </Button>\n                    )}\n                </div>\n\n                <br />\n\n                <Button\n                    isSecondary\n                    isLink\n                    isDestructive\n                    onClick={() => setWarningModalVisible(true)}\n                >\n                    {__(\"Reset newsletter layout\", \"rrze-newsletter\")}\n                </Button>\n\n                {isManageModalVisible && (\n                    <Modal\n                        className=\"rrze-newsletter__modal\"\n                        title={__(\n                            \"Save newsletter as a layout\",\n                            \"rrze-newsletter\"\n                        )}\n                        onRequestClose={() => setIsManageModalVisible(null)}\n                    >\n                        <TextControl\n                            label={__(\"Title\", \"rrze-newsletter\")}\n                            disabled={isSavingLayout}\n                            value={newLayoutName}\n                            onChange={setNewLayoutName}\n                        />\n                        <Button\n                            isPrimary\n                            disabled={\n                                isSavingLayout || newLayoutName.length === 0\n                            }\n                            onClick={handleSaveAsLayout}\n                        >\n                            {__(\"Save\", \"rrze-newsletter\")}\n                        </Button>\n                        <Button\n                            isSecondary\n                            onClick={() => setIsManageModalVisible(null)}\n                        >\n                            {__(\"Cancel\", \"rrze-newsletter\")}\n                        </Button>\n                    </Modal>\n                )}\n\n                {warningModalVisible && (\n                    <Modal\n                        className=\"rrze-newsletter__modal\"\n                        title={__(\n                            \"Overwrite newsletter content?\",\n                            \"rrze-newsletter\"\n                        )}\n                        onRequestClose={() => setWarningModalVisible(false)}\n                    >\n                        <p>\n                            {__(\n                                \"Changing the newsletter's layout will remove any customizations or edits you have already made.\",\n                                \"rrze-newsletter\"\n                            )}\n                        </p>\n                        <Button\n                            isPrimary\n                            onClick={() => {\n                                clearPost();\n                                saveLayoutIdMeta(-1);\n                                setWarningModalVisible(false);\n                            }}\n                        >\n                            {__(\"Reset layout\", \"rrze-newsletter\")}\n                        </Button>\n                        <Button\n                            isSecondary\n                            onClick={() => setWarningModalVisible(false)}\n                        >\n                            {__(\"Cancel\", \"rrze-newsletter\")}\n                        </Button>\n                    </Modal>\n                )}\n            </Fragment>\n        );\n    }\n);\n","/**\n * WordPress dependencies\n */\nimport { __ } from \"@wordpress/i18n\";\nimport { ToggleControl } from \"@wordpress/components\";\nimport { compose } from \"@wordpress/compose\";\nimport { withDispatch, withSelect } from \"@wordpress/data\";\nimport { Fragment } from \"@wordpress/element\";\n\n/**\n * Plugin dependencies\n */\nimport \"./style.scss\";\n\nconst PublicSettingsComponent = (props) => {\n    const { meta, updateIsPublic } = props;\n    const { rrze_newsletter_is_public } = meta;\n\n    return (\n        <Fragment>\n            <ToggleControl\n                className=\"rrze-newsletter__public-toggle-control\"\n                label={__(\"Make newsletter page public?\", \"rrze-newsletter\")}\n                help={__(\n                    \"Make this newsletter viewable as a public page once it’s been sent.\", \"rrze-newsletter\"\n                )}\n                checked={rrze_newsletter_is_public}\n                onChange={(value) => updateIsPublic(value)}\n            />\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = (select) => {\n    const { getEditedPostAttribute } = select(\"core/editor\");\n\n    return {\n        meta: getEditedPostAttribute(\"meta\"),\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    const { editPost } = dispatch(\"core/editor\");\n\n    return {\n        updateIsPublic: (value) => editPost({ meta: { rrze_newsletter_is_public: value } }),\n    };\n};\n\nexport const PublicSettings = compose([\n    withSelect(mapStateToProps),\n    withDispatch(mapDispatchToProps),\n])(PublicSettingsComponent);\n","/**\n * WordPress dependencies\n */\nimport { __ } from \"@wordpress/i18n\";\nimport { compose } from \"@wordpress/compose\";\nimport { withSelect, withDispatch } from \"@wordpress/data\";\nimport { Fragment } from \"@wordpress/element\";\nimport { Button, TextControl, TextareaControl } from \"@wordpress/components\";\n\n/**\n * External dependencies\n */\nimport classnames from \"classnames\";\n\n/**\n * Plugin dependencies\n */\nimport { hasValidEmail } from \"../utils\";\nimport { getServiceProvider } from \"../../service-providers\";\nimport withApiHandler from \"../../components/with-api-handler\";\nimport \"./style.scss\";\n\nconst Sidebar = ({\n    inFlight,\n    errors,\n    editPost,\n    title,\n    senderName,\n    senderEmail,\n    replytoEmail,\n    previewText,\n    newsletterData,\n    apiFetchWithErrorHandling,\n    postId,\n}) => {\n    const renderSubject = () => (\n        <TextControl\n            label={__(\"Subject\", \"rrze-newsletter\")}\n            className=\"rrze-newsletter__subject-textcontrol\"\n            value={title}\n            disabled={inFlight}\n            onChange={(value) => editPost({ title: value })}\n        />\n    );\n\n    const senderEmailClasses = classnames(\n        \"rrze-newsletter__email-textcontrol\",\n        errors.rrze_newsletter_unverified_sender_domain &&\n            \"rrze-newsletter__error\"\n    );\n\n    const updateMetaValueInAPI = (data) =>\n        apiFetchWithErrorHandling({\n            data,\n            method: \"POST\",\n            path: `/rrze-newsletter/v1/post-meta/${postId}`,\n        });\n\n    const renderFrom = () => (\n        <Fragment>\n            <strong>{__(\"From\", \"rrze-newsletter\")}</strong>\n            <TextControl\n                label={__(\"Name\", \"rrze-newsletter\")}\n                className=\"rrze-newsletter__name-textcontrol\"\n                value={senderName}\n                disabled={inFlight}\n                onChange={(value) => editPost({ meta: { rrze_newsletter_from_name: value } })}\n            />\n            <TextControl\n                label={__(\"Email\", \"rrze-newsletter\")}\n                className={senderEmailClasses}\n                value={senderEmail}\n                type=\"email\"\n                disabled={inFlight}\n                onChange={(value) => editPost({ meta: { rrze_newsletter_from_email: value } })}\n            />\n            <TextControl\n                label={__(\"ReplyTo\", \"rrze-newsletter\")}\n                className={senderEmailClasses}\n                value={replytoEmail}\n                type=\"email\"\n                disabled={inFlight}\n                onChange={(value) => editPost({ meta: { rrze_newsletter_replyto: value } })}\n            />\n            <Button\n                isLink\n                onClick={() => {\n                    updateMetaValueInAPI({\n                        key: \"rrze_newsletter_from_name\",\n                        value: senderName,\n                    });\n                    updateMetaValueInAPI({\n                        key: \"rrze_newsletter_from_email\",\n                        value: senderEmail,\n                    });\n                    updateMetaValueInAPI({\n                        key: \"rrze_newsletter_replyto\",\n                        value: replytoEmail,\n                    });\n                }}\n                disabled={\n                    inFlight ||\n                    (senderEmail.length\n                        ? !hasValidEmail(senderEmail)\n                        : false) ||\n                    (replytoEmail.length ? !hasValidEmail(replytoEmail) : false)\n                }\n            >\n                {__(\"Update Sender\", \"rrze-newsletter\")}\n            </Button>\n\n            <TextareaControl\n                label={__(\"Preview text\", \"rrze-newsletter\")}\n                className=\"rrze-newsletter__name-textcontrol rrze-newsletter__name-textcontrol--separated\"\n                value={previewText}\n                disabled={inFlight}\n                onChange={(value) =>\n                    editPost({ meta: { rrze_newsletter_preview_text: value } })\n                }\n            />\n            <Button\n                isLink\n                onClick={() =>\n                    updateMetaValueInAPI({\n                        key: \"rrze_newsletter_preview_text\",\n                        value: previewText,\n                    })\n                }\n                disabled={inFlight}\n            >\n                {__(\"Update preview text\", \"rrze-newsletter\")}\n            </Button>\n        </Fragment>\n    );\n\n    const { ProviderSidebar } = getServiceProvider();\n    return (\n        <Fragment>\n            <ProviderSidebar\n                postId={postId}\n                newsletterData={newsletterData}\n                inFlight={inFlight}\n                renderSubject={renderSubject}\n                renderFrom={renderFrom}\n                updateMeta={(meta) => editPost({ meta })}\n            />\n        </Fragment>\n    );\n};\n\nexport default compose([\n    withApiHandler(),\n    withSelect((select) => {\n        const { getEditedPostAttribute, getCurrentPostId } = select(\n            \"core/editor\"\n        );\n        const meta = getEditedPostAttribute(\"meta\");\n        return {\n            title: getEditedPostAttribute(\"title\"),\n            postId: getCurrentPostId(),\n            senderName: meta.rrze_newsletter_from_name || \"\",\n            senderEmail: meta.rrze_newsletter_from_email || \"\",\n            replytoEmail: meta.rrze_newsletter_replyto || \"\",\n            previewText: meta.rrze_newsletter_preview_text || \"\",\n            newsletterData: meta.newsletterData || {},\n        };\n    }),\n    withDispatch((dispatch) => {\n        const { editPost } = dispatch(\"core/editor\");\n        return { editPost };\n    }),\n])(Sidebar);\n","/**\n * WordPress dependencies\n */\nimport apiFetch from \"@wordpress/api-fetch\";\nimport { compose, useInstanceId } from \"@wordpress/compose\";\nimport { ColorPicker, BaseControl } from \"@wordpress/components\";\nimport { __ } from \"@wordpress/i18n\";\nimport { withDispatch, withSelect } from \"@wordpress/data\";\nimport { Fragment, useEffect } from \"@wordpress/element\";\nimport SelectControlWithOptGroup from \"../../components/select-control-with-optgroup/\";\n\nconst fontOptgroups = [\n    {\n        label: __(\"Sans Serif\", \"rrze-newsletter\"),\n        options: [\n            {\n                value: \"Arial, Helvetica, sans-serif\",\n                label: __(\"Arial\", \"rrze-newsletter\"),\n            },\n            {\n                value: \"Tahoma, sans-serif\",\n                label: __(\"Tahoma\", \"rrze-newsletter\"),\n            },\n            {\n                value: \"Trebuchet MS, sans-serif\",\n                label: __(\"Trebuchet\", \"rrze-newsletter\"),\n            },\n            {\n                value: \"Verdana, sans-serif\",\n                label: __(\"Verdana\", \"rrze-newsletter\"),\n            },\n        ],\n    },\n\n    {\n        label: __(\"Serif\", \"rrze-newsletter\"),\n        options: [\n            {\n                value: \"Georgia, serif\",\n                label: __(\"Georgia\", \"rrze-newsletter\"),\n            },\n            {\n                value: \"Palatino, serif\",\n                label: __(\"Palatino\", \"rrze-newsletter\"),\n            },\n            {\n                value: \"Times New Roman, serif\",\n                label: __(\"Times New Roman\", \"rrze-newsletter\"),\n            },\n        ],\n    },\n\n    {\n        label: __(\"Monospace\", \"rrze-newsletter\"),\n        options: [\n            {\n                value: \"Courier, monospace\",\n                label: __(\"Courier\", \"rrze-newsletter\"),\n            },\n        ],\n    },\n];\n\nconst customStylesSelector = (select) => {\n    const { getEditedPostAttribute } = select(\"core/editor\");\n    const meta = getEditedPostAttribute(\"meta\");\n    return {\n        fontBody: meta.rrze_newsletter_font_body || fontOptgroups[1].options[0].value,\n        fontHeader: meta.rrze_newsletter_font_header || fontOptgroups[0].options[0].value,\n        backgroundColor: meta.rrze_newsletter_background_color || \"#ffffff\",\n    };\n};\n\nexport const ApplyStyling = withSelect(customStylesSelector)(\n    ({ fontBody, fontHeader, backgroundColor }) => {\n        useEffect(() => {\n            document.documentElement.style.setProperty(\"--body-font\", fontBody);\n        }, [fontBody]);\n        useEffect(() => {\n            document.documentElement.style.setProperty(\n                \"--header-font\",\n                fontHeader\n            );\n        }, [fontHeader]);\n        useEffect(() => {\n            const editorElement = document.querySelector(\n                \".edit-post-visual-editor\"\n            );\n            if (editorElement) {\n                editorElement.style.backgroundColor = backgroundColor;\n            }\n        }, [backgroundColor]);\n\n        return null;\n    }\n);\n\nexport const Styling = compose([\n    withDispatch((dispatch) => {\n        const { editPost } = dispatch(\"core/editor\");\n        return { editPost };\n    }),\n    withSelect((select) => {\n        const { getCurrentPostId } = select(\"core/editor\");\n        return {\n            postId: getCurrentPostId(),\n            ...customStylesSelector(select),\n        };\n    }),\n])(({ editPost, fontBody, fontHeader, backgroundColor, postId }) => {\n    const updateStyleValue = (key, value) => {\n        editPost({ meta: { [key]: value } });\n        apiFetch({\n            data: { key, value },\n            method: \"POST\",\n            path: `/rrze-newsletter/v1/post-meta/${postId}`,\n        });\n    };\n\n    const instanceId = useInstanceId(SelectControlWithOptGroup);\n    const id = `inspector-select-control-${instanceId}`;\n\n    return (\n        <Fragment>\n            <SelectControlWithOptGroup\n                label={__(\"Headings font\", \"rrze-newsletter\")}\n                value={fontHeader}\n                optgroups={fontOptgroups}\n                onChange={(value) => updateStyleValue(\"rrze_newsletter_font_header\", value)}\n            />\n            <SelectControlWithOptGroup\n                label={__(\"Body font\", \"rrze-newsletter\")}\n                value={fontBody}\n                optgroups={fontOptgroups}\n                onChange={(value) => updateStyleValue(\"rrze_newsletter_font_body\", value)}\n            />\n            <BaseControl\n                label={__(\"Background color\", \"rrze-newsletter\")}\n                id={id}\n            >\n                <ColorPicker\n                    id={id}\n                    color={backgroundColor}\n                    onChangeComplete={(value) =>\n                        updateStyleValue(\"rrze_newsletter_background_color\", value.hex)\n                    }\n                    disableAlpha\n                />\n            </BaseControl>\n        </Fragment>\n    );\n});\n","/**\n * WordPress dependencies\n */\nimport { __ } from \"@wordpress/i18n\";\nimport { withSelect, withDispatch } from \"@wordpress/data\";\nimport { compose } from \"@wordpress/compose\";\nimport { Fragment, useState } from \"@wordpress/element\";\nimport { Button, Spinner, TextControl } from \"@wordpress/components\";\nimport { hasValidEmail } from \"../utils\";\n\n/**\n * Plugin dependencies\n */\nimport withApiHandler from \"../../components/with-api-handler\";\nimport \"./style.scss\";\n\nexport default compose([\n    withApiHandler(),\n    withSelect((select) => {\n        const { getCurrentPostId } = select(\"core/editor\");\n        return { postId: getCurrentPostId() };\n    }),\n    withDispatch((dispatch) => {\n        const { savePost } = dispatch(\"core/editor\");\n        return {\n            savePost,\n        };\n    }),\n])(\n    ({\n        apiFetchWithErrorHandling,\n        inFlight,\n        postId,\n        savePost,\n        setInFlightForAsync,\n    }) => {\n        const [testEmail, setTestEmail] = useState(\"\");\n        const sendTestEmail = async () => {\n            setInFlightForAsync();\n            await savePost();\n            const params = {\n                path: `/rrze-newsletter/v1/email/${postId}/test`,\n                data: {\n                    test_email: testEmail,\n                },\n                method: \"POST\",\n            };\n            apiFetchWithErrorHandling(params);\n        };\n        return (\n            <Fragment>\n                <TextControl\n                    label={__(\"Send a test to\", \"rrze-newsletter\")}\n                    value={testEmail}\n                    type=\"email\"\n                    onChange={setTestEmail}\n                    help={__(\n                        \"Use commas to separate multiple emails.\",\n                        \"rrze-newsletter\"\n                    )}\n                />\n                <div className=\"rrze-newsletter__testing-controls\">\n                    <Button\n                        isPrimary\n                        onClick={sendTestEmail}\n                        disabled={inFlight || !hasValidEmail(testEmail)}\n                    >\n                        {inFlight\n                            ? __(\"Sending Test Email...\", \"rrze-newsletter\")\n                            : __(\"Send a Test Email\", \"rrze-newsletter\")}\n                    </Button>\n                    {inFlight && <Spinner />}\n                </div>\n            </Fragment>\n        );\n    }\n);\n","/**\n * Test if a string contains valid email addresses.\n *\n * @param  {string}  string String to test.\n * @return {boolean} True if it contains a valid email string.\n */\nexport const hasValidEmail = (string) => /\\S+@\\S+/.test(string);\n","/**\n * WordPress dependencies\n */\nimport { __ } from \"@wordpress/i18n\";\nimport { Fragment } from \"@wordpress/element\";\n\n/**\n * Validation utility.\n *\n * @param  {Object} object data fetched using getFetchDataConfig\n * @return {string[]} Array of validation messages. If empty, newsletter is valid.\n */\nconst validateNewsletter = ({ status }) => {\n    const messages = [];\n    if (\"sent\" === status || \"sending\" === status) {\n        messages.push(\n            __(\"Newsletter has already been sent.\", \"rrze-newsletter\")\n        );\n    }\n\n    return messages;\n};\n\n/**\n * Get config used to fetch newsletter data.\n * Should return apiFetch utility config:\n * https://www.npmjs.com/package/@wordpress/api-fetch\n *\n * @param {Object} object data to contruct the config.\n * @return {Object} Config fetching.\n */\nconst getFetchDataConfig = ({ postId }) => ({\n    path: `/rrze-newsletter/v1/email/${postId}`,\n});\n\n/**\n * Component to be rendered in the sidebar panel.\n * Has full control over the panel contents rendering,\n * so that it's possible to render e.g. a loader while\n * the data is not yet available.\n *\n * @param {Object} props props\n */\nconst ProviderSidebar = ({\n    /**\n     * ID of the edited newsletter post.\n     */\n    postId,\n    /**\n     * Fetching handler. Receives config for @wordpress/api-fetch as argument.\n     */\n    apiFetch,\n    /**\n     * Function that renders email subject input.\n     */\n    renderSubject,\n    /**\n     * Function that renders from inputs - sender name and email.\n     * Has to receive an object with `handleSenderUpdate` function,\n     * which will receive a `{senderName, senderEmail}` object – so that\n     * the data can be sent to the backend.\n     */\n    renderFrom,\n}) => {\n    const handleSenderUpdate = ({ senderName, senderEmail }) =>\n        apiFetch({\n            path: `/rrze-newsletter/v1/email/${postId}/sender`,\n            data: {\n                rrze_newsletter_from_name: senderName,\n                rrze_newsletter_replyto: senderEmail,\n            },\n            method: \"POST\",\n        });\n\n    return (\n        <Fragment>\n            {renderSubject()}\n            {renderFrom({ handleSenderUpdate })}\n        </Fragment>\n    );\n};\n\n/**\n * A function to render additional info in the pre-send confirmation modal.\n * Can return null if no additional info is to be presented.\n *\n * @param {Object} newsletterData the data returned by getFetchDataConfig handler\n * @return {any} A React component\n */\nconst renderPreSendInfo = (newsletterData = {}) => (\n    <p>\n        {__(\"Sending newsletter to:\", \"rrze-newsletter\")}{\" \"}\n        {newsletterData.listName}\n    </p>\n);\n\nexport default {\n    validateNewsletter,\n    getFetchDataConfig,\n    ProviderSidebar,\n    renderPreSendInfo,\n};\n","import generic from \"./generic\";\n\nconst SERVICE_PROVIDERS = {\n  generic,\n};\n\nexport const getServiceProvider = () => {\n  return SERVICE_PROVIDERS[\"generic\"];\n};\n","export const LAYOUT_CPT_SLUG = \"newsletter_layout\";\nexport const NEWSLETTER_CPT_SLUG = \"newsletter\";\nexport const BLANK_LAYOUT_ID = 0;\n","/**\n * WordPress dependencies\n */\nimport apiFetch from \"@wordpress/api-fetch\";\nimport { useState, useEffect } from \"@wordpress/element\";\n\n/**\n * Plugin dependencies\n */\nimport { LAYOUT_CPT_SLUG } from \"./consts\";\n\n/**\n * A React hook that provides the layouts list,\n * both default and user-defined.\n *\n * @return {Array} Array of layouts\n */\nexport const useLayoutsState = () => {\n    const [isFetching, setIsFetching] = useState(true);\n    const [layouts, setLayouts] = useState([]);\n\n    useEffect(() => {\n        apiFetch({\n            path: `/rrze-newsletter/v1/layouts`,\n        }).then((response) => {\n            setLayouts(response);\n            setIsFetching(false);\n        });\n    }, []);\n\n    const deleteLayoutPost = (id) => {\n        setLayouts(layouts.filter(({ ID }) => ID !== id));\n        apiFetch({\n            path: `/wp/v2/${LAYOUT_CPT_SLUG}/${id}`,\n            method: \"DELETE\",\n        });\n    };\n\n    return { layouts, isFetchingLayouts: isFetching, deleteLayoutPost };\n};\n","/**\n * IntPluginernal dependencies\n */\nimport { LAYOUT_CPT_SLUG } from \"./consts\";\n\nexport const isUserDefinedLayout = (layout) =>\n    layout && layout.post_type === LAYOUT_CPT_SLUG;\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","module.exports = lodash;","module.exports = wp.apiFetch;","module.exports = wp.blockEditor;","module.exports = wp.blocks;","module.exports = wp.components;","module.exports = wp.compose;","module.exports = wp.data;","module.exports = wp.domReady;","module.exports = wp.editPost;","module.exports = wp.element;","module.exports = wp.hooks;","module.exports = wp.i18n;","module.exports = wp.keycodes;","module.exports = wp.plugins;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * WordPress dependencies\n */\nimport { unregisterBlockStyle } from \"@wordpress/blocks\";\nimport domReady from \"@wordpress/dom-ready\";\nimport { addFilter } from \"@wordpress/hooks\";\nimport { registerPlugin } from \"@wordpress/plugins\";\n\n/**\n * Plugin dependencies\n */\nimport \"./style.scss\";\nimport { addBlocksValidationFilter } from \"./blocks-validation/blocks-filters\";\nimport { NestedColumnsDetection } from \"./blocks-validation/nesting-detection\";\nimport \"../newsletter-editor\";\n\naddBlocksValidationFilter();\n\n/* Unregister core block styles that are unsupported in emails */\ndomReady(() => {\n    unregisterBlockStyle(\"core/separator\", \"dots\");\n    unregisterBlockStyle(\"core/social-links\", \"logos-only\");\n    unregisterBlockStyle(\"core/social-links\", \"pill-shape\");\n});\n\naddFilter(\n    \"blocks.registerBlockType\",\n    \"rrze-newsletter/core-blocks\",\n    (settings, name) => {\n        /* Remove left/right alignment options wherever possible */\n        if (\n            \"core/paragraph\" === name ||\n            \"core/buttons\" === name ||\n            \"core/columns\" === name\n        ) {\n            settings.supports = { ...settings.supports, align: [] };\n        }\n        if (\"core/group\" === name) {\n            settings.supports = { ...settings.supports, align: [\"full\"] };\n        }\n        return settings;\n    }\n);\n\nregisterPlugin(\"rrze-newsletter-plugin\", {\n    render: NestedColumnsDetection,\n    icon: null,\n});\n"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAIA;AACA;AAGA;AACA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAzDA;AACA;AA0DA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AAKA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAVA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AADA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAGA;AALA;AAOA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;A;;;;;;;;;;;;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;A;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAoBA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AANA;AADA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAMA;AACA;AACA;AACA;AACA;AAJA;AACA;A;;;;;;;;;;;;;;ACjGA;AAEA;AACA;AADA;AAIA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;A;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;A;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;A;;;;;;;;;;ACrDA;AACA;AACA;A;;;;;;;;;;ACFA;AACA;AACA;A;;;;;;;;;;ACFA;AACA;AACA;A;;;;;;;;;;ACFA;AACA;AACA;A;;;;;;;;;;ACFA;AACA;AACA;A;;;;;;;;;;ACFA;AACA;AACA;A;;;;;;;;;;ACFA;AACA;AACA;A;;;;;;;;;;ACFA;AACA;AACA;A;;;;;;;;;;ACFA;AACA;AACA;A;;;;;;;;;ACFA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;;;;;;ACDA;AACA;A;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAFA;;;A","sourceRoot":""}